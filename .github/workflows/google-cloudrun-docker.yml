name: Build and Deploy to Cloud Run

on:
  push:
    # Only run workflow when a new tag is created
    tags: ["*"]

env:
  PROJECT_ID: tricktakersclub
  GAR_LOCATION: us-central1
  FRONTEND_SERVICE: frontend-service
  CORE_SERVICE: core-service
  REGION: us-central1

jobs:
  build-frontend:
    name: Build and Push Frontend
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          # Required to produced `steps.auth.outputs.access_token` for docker-auth step
          token_format: "access_token"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v3"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build \
            --build-arg FIREBASE_API_KEY="${{ secrets.FIREBASE_API_KEY }}" \
            --build-arg FIREBASE_AUTH_DOMAIN="${{ secrets.FIREBASE_AUTH_DOMAIN }}" \
            --build-arg FIREBASE_PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID }}" \
            --build-arg FIREBASE_STORAGE_BUCKET="${{ secrets.FIREBASE_STORAGE_BUCKET }}" \
            --build-arg FIREBASE_MESSAGING_SENDER_ID="${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" \
            --build-arg FIREBASE_APP_ID="${{ secrets.FIREBASE_APP_ID }}" \
            --build-arg ABLY_API_KEY="${{ secrets.ABLY_API_KEY }}" \
            --build-arg CORE_SERVICE_URL="${{ secrets.CORE_SERVICE_URL }}" \
            --build-arg REF_NAME="${{ github.ref_name }}" \
            -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}/${{ github.sha }}" ./frontend
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}/${{ github.sha }}"

  build-core-service:
    name: Build and Push Core Service
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          # Required to produced `steps.auth.outputs.access_token` for docker-auth step
          token_format: "access_token"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v3"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CORE_SERVICE }}/${{ github.sha }}" ./backend/core
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CORE_SERVICE }}/${{ github.sha }}"

  deploy:
    name: Deploy to Cloud Run
    needs: [build-frontend, build-core-service]
    runs-on: ubuntu-latest
    steps:
      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          # Required to produced `steps.auth.outputs.access_token` for docker-auth step
          token_format: "access_token"

      - name: Deploy Frontend
        id: deploy-frontend
        uses: "google-github-actions/deploy-cloudrun@v2"
        with:
          service: ${{ env.FRONTEND_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}/${{ github.sha }}

      - name: Deploy Core Service
        id: deploy-core-service
        uses: "google-github-actions/deploy-cloudrun@v2"
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          ABLY_API_KEY: ${{ secrets.ABLY_API_KEY }}
          BROWSER_ORIGIN: ${{ secrets.BROWSER_ORIGIN }}
          SERVER_WORKER_TIMEOUT: ${{ secrets.SERVER_WORKER_TIMEOUT }}
        with:
          service: ${{ env.CORE_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CORE_SERVICE }}/${{ github.sha }}

      - name: Show Frontend Service Output
        run: echo ${{ steps.deploy-frontend.outputs.url }}

      - name: Show Core Service Output
        run: echo ${{ steps.deploy-core-service.outputs.url }}
