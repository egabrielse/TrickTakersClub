name: Build and Deploy to Cloud Run

on:
  push:
    # Only run workflow when a new tag is created
    tags: ["*"]

env:
  PROJECT_ID: tricktakersclub
  GAR_LOCATION: us-central1
  FRONTEND_SERVICE: frontend-service
  CORE_SERVICE: core-service
  PLAY_SERVICE: play-service
  REGION: us-central1

jobs:
  # BUILD FRONTEND SERVICE
  build-frontend:
    name: Build and Push Frontend
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          # Required to produced `steps.auth.outputs.access_token` for docker-auth step
          token_format: "access_token"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v3"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build \
            --build-arg FIREBASE_API_KEY="${{ secrets.FIREBASE_API_KEY }}" \
            --build-arg FIREBASE_AUTH_DOMAIN="${{ secrets.FIREBASE_AUTH_DOMAIN }}" \
            --build-arg FIREBASE_PROJECT_ID="${{ secrets.FIREBASE_PROJECT_ID }}" \
            --build-arg FIREBASE_STORAGE_BUCKET="${{ secrets.FIREBASE_STORAGE_BUCKET }}" \
            --build-arg FIREBASE_MESSAGING_SENDER_ID="${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" \
            --build-arg FIREBASE_APP_ID="${{ secrets.FIREBASE_APP_ID }}" \
            --build-arg REF_NAME="${{ github.ref_name }}" \
            -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}/${{ github.sha }}" ./frontend
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}/${{ github.sha }}"

  # BUILD CORE SERVICE
  build-core-service:
    name: Build and Push Core Service
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          # Required to produced `steps.auth.outputs.access_token` for docker-auth step
          token_format: "access_token"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v3"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CORE_SERVICE }}/${{ github.sha }}" -f ./backend/Dockerfile.core .
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CORE_SERVICE }}/${{ github.sha }}"

  # BUILD PLAY SERVICE
  build-play-service:
    name: Build and Push Play Service
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          # Required to produced `steps.auth.outputs.access_token` for docker-auth step
          token_format: "access_token"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v3"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PLAY_SERVICE }}/${{ github.sha }}" -f ./backend/Dockerfile.play .
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PLAY_SERVICE }}/${{ github.sha }}"

  # DEPLOY SERVICES
  deploy:
    name: Deploy to Cloud Run
    needs: [build-frontend, build-core-service, build-play-service]
    runs-on: ubuntu-latest
    steps:
      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.PROJECT_ID }}
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          # Required to produced `steps.auth.outputs.access_token` for docker-auth step
          token_format: "access_token"

      - name: Deploy Frontend
        id: deploy-frontend
        uses: "google-github-actions/deploy-cloudrun@v2"
        with:
          service: ${{ env.FRONTEND_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.FRONTEND_SERVICE }}/${{ github.sha }}

      - name: Deploy Core Service
        id: deploy-core-service
        uses: "google-github-actions/deploy-cloudrun@v2"
        with:
          service: ${{ env.CORE_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CORE_SERVICE }}/${{ github.sha }}
          flags: |
            --update-secrets=ALLOWED_ORIGIN=ALLOWED_ORIGIN:latest,
            FIREBASE_PROJECT_ID=FIREBASE_PROJECT_ID:latest,
            REDIS_HOST=REDIS_HOST:latest,
            REDIS_PORT=REDIS_PORT:latest,
            REDIS_PASS=REDIS_PASS:latest

      - name: Deploy Play Service
        id: deploy-play-service
        uses: "google-github-actions/deploy-cloudrun@v2"
        with:
          service: ${{ env.PLAY_SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.PLAY_SERVICE }}/${{ github.sha }}
          flags: |
            --update-secrets=ALLOWED_ORIGIN=ALLOWED_ORIGIN:latest,
            FIREBASE_PROJECT_ID=FIREBASE_PROJECT_ID:latest,
            REDIS_HOST=REDIS_HOST:latest,
            REDIS_PORT=REDIS_PORT:latest,
            REDIS_PASS=REDIS_PASS:latest
            SESSION_WORKER_TIMEOUT=SESSION_WORKER_TIMEOUT:latest,
            GAME_EXPIRATION_DURATION=GAME_EXPIRATION_DURATION:latest,
            SESSION_EXPIRATION_DURATION=SESSION_EXPIRATION_DURATION:latest,
            PRESENCE_EXPIRATION_DURATION=PRESENCE_EXPIRATION_DURATION:latest

      - name: Show Frontend Service Output
        run: echo ${{ steps.deploy-frontend.outputs.url }}

      - name: Show Core Service Output
        run: echo ${{ steps.deploy-core-service.outputs.url }}

      - name: Show Play Service Output
        run: echo ${{ steps.deploy-play-service.outputs.url }}
